<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ehlxr&#39;s Blog</title>
  <subtitle>世界那么大，在此安个家...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ehlxr.me/"/>
  <updated>2017-04-12T05:58:32.902Z</updated>
  <id>http://ehlxr.me/</id>
  
  <author>
    <name>小桥流水人家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Poker 机械键盘入手记</title>
    <link href="http://ehlxr.me/2017/04/09/Poker-%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E5%85%A5%E6%89%8B%E8%AE%B0/"/>
    <id>http://ehlxr.me/2017/04/09/Poker-机械键盘入手记/</id>
    <published>2017-04-09T16:49:50.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个码农，天天和键盘打交道，没有一款称心如意的键盘怎么能行了？要说那一款键盘堪称神器，我想大多数程序员首推 HHKB ，怎奈囊中羞涩，只能找一款 HHKB 的替代品，于是，Poker 浮现我的眼中，经济实惠，小巧玲珑，深得我心…</p>
<p>关注这款键盘其实很久了，虽说相对于 HHKB 来说便宜很多，但也有点儿心疼，迟迟没能入手。最近过生日，女朋友很民主的征求我的意见，问我想要什么礼物，嘿嘿</p>
<a id="more"></a>
<p>昨天下午京东入手，399 大洋，白色茶轴，今天上午就到了，嘻嘻！</p>
<h1 id="先来两张，亮亮相！"><a href="#先来两张，亮亮相！" class="headerlink" title="先来两张，亮亮相！"></a>先来两张，亮亮相！</h1><p>包装盒，”The keyboard to cheer you up“，简洁、大气！</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/IMG_2225.JPG" alt=""></p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/IMG_2223.JPG" alt=""></p>
<p>PBT 材质的键帽手感棒棒的！</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/IMG_2224.JPG" alt=""></p>
<p>带了六个键帽，换上之后的效果。有没有显得很有灵气(女朋友反而觉得还是全白色的好看)</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/IMG_2226.JPG" alt=""></p>
<p>真的很小，都不够一个手的宽度，长度比 MBP 自带键盘稍长一点。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/IMG_2228.JPG" alt=""></p>
<p>ikbc 正品，妥妥的！</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/ehlxr-poker-0.png" alt=""></p>
<h1 id="修改键位"><a href="#修改键位" class="headerlink" title="修改键位"></a>修改键位</h1><p>键盘的背面有 4 个拨动开关的，他们的功能分别是：</p>
<ul>
<li>开关 1：Caps 与左 Win 切换</li>
<li>开关 2：右 Ctrl 与 ` ~ 切换</li>
<li>开关 3：左 Win 与 Fn 切换</li>
<li>开关 4：键盘写保护，键位编程</li>
</ul>
<p>这是默认的键盘布局：</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/ehlxr-poker-2.jpeg" alt=""></p>
<ol>
<li>将开关 1 和 3 都拨到 ON 的位置，效果：Caps 变成了 Fn，左 Win 变成了 Caps，右 Fn 还是 Fn</li>
<li>打开 Mac 的系统偏好设置，在键盘的修饰键修改中，选择 Poker</li>
<li>更改修饰键，如下：<ul>
<li>Caps Lock -&gt; Option</li>
<li>Control -&gt; Control</li>
<li>Option -&gt; Command</li>
<li>Command -&gt; Option<br><img src="http://oapjp6spr.bkt.clouddn.com/ehlxr-poker-3.png" alt=""></li>
</ul>
</li>
<li>搞定，然后用拔键器把左侧的 Alt 和 Win 键帽互换个位置，这样就更接近 Mac 的标准布局了。</li>
</ol>
<p><img src="http://oapjp6spr.bkt.clouddn.com/ehlxr-poker-1.png" alt=""></p>
<p>这样，左手按住 Fn + w、s、a、d 方便的实现上、下、左、右的操作了。</p>
<p>其实还有个方便使用方向键的方法，按一下<code>fn</code> + <code>空格</code>， <code>w</code>, <code>a</code>, <code>s</code>, <code>d</code>就是方向键了，再按一次则恢复到基本模式。</p>
<p>唯一的问题就是现在 <code>Caps Lock</code> 键消失了，只不过不常用。后期可以研究一下如何通过编程的方式实现其他组合键。</p>
<hr>
<p>参考：</p>
<p><a href="https://segmentfault.com/a/1190000000585559" target="_blank" rel="external">Poker II 机械键盘键位改造记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个码农，天天和键盘打交道，没有一款称心如意的键盘怎么能行了？要说那一款键盘堪称神器，我想大多数程序员首推 HHKB ，怎奈囊中羞涩，只能找一款 HHKB 的替代品，于是，Poker 浮现我的眼中，经济实惠，小巧玲珑，深得我心…&lt;/p&gt;
&lt;p&gt;关注这款键盘其实很久了，虽说相对于 HHKB 来说便宜很多，但也有点儿心疼，迟迟没能入手。最近过生日，女朋友很民主的征求我的意见，问我想要什么礼物，嘿嘿&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Java 获取系统的配置信息</title>
    <link href="http://ehlxr.me/2017/03/29/Java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>http://ehlxr.me/2017/03/29/Java-获取系统的配置信息/</id>
    <published>2017-03-29T15:33:54.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<p><code>System.getProperty()</code> 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 <code>System.getProperty(&quot;java.io.tmpdir&quot;)</code> 可以获取不同操作系统平台下的临时目录。比如：</p>
<p>在 <code>windows</code> 中的目录是：<code>C:\Users\登录用户~1\AppData\Local\Temp\</code></p>
<p>在 <code>linux</code> 下的目录是：<code>/tmp</code></p>
<p>在 <code>Mac</code> 下目录是 <code>/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/</code> （我感觉是不同电脑应该不一样）</p>
<a id="more"></a>
<p>借此机会总结一下 <code>System.getProperty()</code> 可以获取那些系统信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">java.version    <span class="comment">// Java运行时环境版本</span></div><div class="line">java.vendor <span class="comment">// Java运行时环境供应商</span></div><div class="line">java.vendor.url <span class="comment">// Java供应商的 URL</span></div><div class="line">java.home   <span class="comment">// Java安装目录</span></div><div class="line">java.vm.specification.version   <span class="comment">// Java虚拟机规范版本</span></div><div class="line">java.vm.specification.vendor    <span class="comment">// Java虚拟机规范供应商</span></div><div class="line">java.vm.specification.name  <span class="comment">// Java虚拟机规范名称</span></div><div class="line">java.vm.version <span class="comment">// Java虚拟机实现版本</span></div><div class="line">java.vm.vendor  <span class="comment">// Java虚拟机实现供应商</span></div><div class="line">java.vm.name    <span class="comment">// Java虚拟机实现名称</span></div><div class="line">java.specification.version  <span class="comment">// Java运行时环境规范版本</span></div><div class="line">java.specification.vendor   <span class="comment">// Java运行时环境规范供应商</span></div><div class="line">java.specification.name <span class="comment">// Java运行时环境规范名称</span></div><div class="line">java.class.version  <span class="comment">// Java类格式版本号</span></div><div class="line">java.class.path <span class="comment">// Java类路径</span></div><div class="line">java.library.path   <span class="comment">// 加载库时搜索的路径列表</span></div><div class="line">java.io.tmpdir  <span class="comment">// 默认的临时文件路径</span></div><div class="line">java.compiler   <span class="comment">// 要使用的 JIT 编译器的名称</span></div><div class="line">java.ext.dirs   <span class="comment">// 一个或多个扩展目录的路径</span></div><div class="line">os.name <span class="comment">// 操作系统的名称</span></div><div class="line">os.arch <span class="comment">// 操作系统的架构</span></div><div class="line">os.version  <span class="comment">// 操作系统的版本</span></div><div class="line">file.separator  <span class="comment">// 文件分隔符（在 UNIX 系统中是“/”）</span></div><div class="line">path.separator  <span class="comment">// 路径分隔符（在 UNIX 系统中是“:”）</span></div><div class="line">line.separator  <span class="comment">// 行分隔符（在 UNIX 系统中是“/n”）</span></div><div class="line">user.name   <span class="comment">// 用户的账户名称</span></div><div class="line">user.home   <span class="comment">// 用户的主目录</span></div><div class="line">user.dir    <span class="comment">// 用户的当前工作目录</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;System.getProperty()&lt;/code&gt; 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 &lt;code&gt;System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;)&lt;/code&gt; 可以获取不同操作系统平台下的临时目录。比如：&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;windows&lt;/code&gt; 中的目录是：&lt;code&gt;C:\Users\登录用户~1\AppData\Local\Temp\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;linux&lt;/code&gt; 下的目录是：&lt;code&gt;/tmp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Mac&lt;/code&gt; 下目录是 &lt;code&gt;/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/&lt;/code&gt; （我感觉是不同电脑应该不一样）&lt;/p&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="http://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://ehlxr.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用技巧总结</title>
    <link href="http://ehlxr.me/2017/02/21/Mac-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://ehlxr.me/2017/02/21/Mac-使用技巧总结/</id>
    <published>2017-02-21T21:40:06.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Mac 系统日常使用技巧归纳总结。</p>
</blockquote>
<h1 id="一、Mac-中-Finder-显示、关闭隐藏文件"><a href="#一、Mac-中-Finder-显示、关闭隐藏文件" class="headerlink" title="一、Mac 中 Finder 显示、关闭隐藏文件"></a>一、Mac 中 Finder 显示、关闭隐藏文件</h1><h2 id="1-1-打开终端，输入："><a href="#1-1-打开终端，输入：" class="headerlink" title="1.1 打开终端，输入："></a>1.1 打开终端，输入：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 此命令显示隐藏文件 </div><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</div><div class="line"></div><div class="line"># 此命令关闭显示隐藏文件</div><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</div></pre></td></tr></table></figure>
<h2 id="1-2-命令运行之后需要重新加载-Finder"><a href="#1-2-命令运行之后需要重新加载-Finder" class="headerlink" title="1.2 命令运行之后需要重新加载 Finder"></a>1.2 命令运行之后需要重新加载 Finder</h2><p>快捷键 <code>Option + Command + ESC</code>，选中 <code>Finder</code>，重新启动即可</p>
<a id="more"></a>
<h1 id="二、Terminal-中使用-Sublime-打开文件"><a href="#二、Terminal-中使用-Sublime-打开文件" class="headerlink" title="二、Terminal 中使用 Sublime 打开文件"></a>二、Terminal 中使用 Sublime 打开文件</h1><h2 id="2-1-如果使用默认-Shell"><a href="#2-1-如果使用默认-Shell" class="headerlink" title="2.1 如果使用默认 Shell"></a>2.1 如果使用默认 Shell</h2><p>在 <code>Terminal</code> 输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s &quot;/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl&quot; /usr/bin/subl</div></pre></td></tr></table></figure>
<h2 id="2-2-如果使用-zsh"><a href="#2-2-如果使用-zsh" class="headerlink" title="2.2 如果使用 zsh"></a>2.2 如果使用 zsh</h2><p>在文件 <code>~/.zshrc</code> 最后添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alias subl=&quot;&apos;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&apos;&quot;</div><div class="line"></div><div class="line">alias nano=&quot;subl&quot;</div><div class="line"></div><div class="line">export EDITOR=&quot;subl&quot;</div></pre></td></tr></table></figure>
<p>然后在 <code>Terminal</code> 中使用 <code>subl</code> 就可以打开 <code>Sublime</code> 了。</p>
<h2 id="2-3-使用-Sublime-打开指定的文件"><a href="#2-3-使用-Sublime-打开指定的文件" class="headerlink" title="2.3 使用 Sublime 打开指定的文件"></a>2.3 使用 Sublime 打开指定的文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open -a Sublime\ Text .m2/settings.xml</div></pre></td></tr></table></figure>
<blockquote>
<p>可以使用 <code>Tab</code> 自定补全应用名称</p>
</blockquote>
<h1 id="三、多屏切换-dock-显示"><a href="#三、多屏切换-dock-显示" class="headerlink" title="三、多屏切换 dock 显示"></a>三、多屏切换 dock 显示</h1><p>如果 <code>dock</code> 在屏幕底部显示，移动鼠标到要显示 <code>dock</code> 的屏幕上，单击使屏幕处于选中状态，在屏幕底部中间部位向下滑动鼠标即可移动 <code>dock</code> 到当前屏幕上显示。</p>
<h1 id="四、Terminal-重启-Finder、dock-等命令"><a href="#四、Terminal-重启-Finder、dock-等命令" class="headerlink" title="四、Terminal 重启 Finder、dock 等命令"></a>四、Terminal 重启 Finder、dock 等命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Finder 崩溃重启</div><div class="line">killall -kill Finder</div><div class="line"></div><div class="line"># Dock 崩溃重启</div><div class="line">killall -kill Dock</div><div class="line"></div><div class="line"># 菜单栏崩溃重启</div><div class="line">killall -kill SystemUIServer</div></pre></td></tr></table></figure>
<h1 id="五、Terminal-中用打开当前路径的文件夹"><a href="#五、Terminal-中用打开当前路径的文件夹" class="headerlink" title="五、Terminal 中用打开当前路径的文件夹"></a>五、Terminal 中用打开当前路径的文件夹</h1><p>在 <code>Terminal</code> 中输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open .</div></pre></td></tr></table></figure>
<h1 id="六、剪贴文件"><a href="#六、剪贴文件" class="headerlink" title="六、剪贴文件"></a>六、剪贴文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 复制</div><div class="line">Command + c</div><div class="line"></div><div class="line"># 剪切到当前目录</div><div class="line">Command + Option + v</div></pre></td></tr></table></figure>
<h1 id="七、快速打开最小化程序"><a href="#七、快速打开最小化程序" class="headerlink" title="七、快速打开最小化程序"></a>七、快速打开最小化程序</h1><p><code>Command + Tab</code> 切换程序的时候，最小化的程序不自动弹出窗口，解决办法如下：</p>
<ul>
<li>用 <code>Command + Tab</code> 切换到要打开的程序</li>
<li>先松开 <code>Tab</code> 键，不要松开 <code>Command</code> 键</li>
<li>然后按住 <code>Option</code> 键</li>
<li>然后依次松开 <code>Command</code> 和 <code>Option</code> 键</li>
</ul>
<p>如上操作就可以快速打开最小化的程序了。</p>
<h1 id="八、常用快捷键"><a href="#八、常用快捷键" class="headerlink" title="八、常用快捷键"></a>八、常用快捷键</h1><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="external">Mac 键盘快捷键官方参考</a></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>预览文件</td>
<td><code>空格</code></td>
</tr>
<tr>
<td>重命名</td>
<td><code>Enter</code></td>
</tr>
<tr>
<td>打开文件</td>
<td><code>Command + o</code>、<code>Command + ↓</code></td>
</tr>
<tr>
<td>显示桌面</td>
<td><code>F11</code></td>
</tr>
<tr>
<td>切换窗口全屏状态</td>
<td><code>Ctrl + Cmmad + f</code></td>
</tr>
</tbody>
</table>
<h1 id="九、-DS-Store-文件处理"><a href="#九、-DS-Store-文件处理" class="headerlink" title="九、.DS_Store 文件处理"></a>九、.DS_Store 文件处理</h1><p><a href="https://zh.wikipedia.org/wiki/.DS_Store" target="_blank" rel="external">.DS_Store (英文全称 Desktop Services Store) 是一种由苹果公司的 Mac OS X 操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。</a></p>
<h2 id="9-1-清除文件"><a href="#9-1-清除文件" class="headerlink" title="9.1 清除文件"></a>9.1 清除文件</h2><p>清除命令：</p>
<p><code>sudo find / -name &quot;.DS_Store&quot; -depth -exec rm {} \;</code></p>
<h2 id="9-2-禁用或启用自动生成"><a href="#9-2-禁用或启用自动生成" class="headerlink" title="9.2 禁用或启用自动生成"></a>9.2 禁用或启用自动生成</h2><p>执行以下命令，回车执行，重启 Mac 即可生效。</p>
<ul>
<li>禁止.DS_store生成：</li>
</ul>
<p><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></p>
<ul>
<li>恢复.DS_store生成：</li>
</ul>
<p><code>defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></p>
<hr>
<p><em>未完待续…</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Mac 系统日常使用技巧归纳总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、Mac-中-Finder-显示、关闭隐藏文件&quot;&gt;&lt;a href=&quot;#一、Mac-中-Finder-显示、关闭隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;一、Mac 中 Finder 显示、关闭隐藏文件&quot;&gt;&lt;/a&gt;一、Mac 中 Finder 显示、关闭隐藏文件&lt;/h1&gt;&lt;h2 id=&quot;1-1-打开终端，输入：&quot;&gt;&lt;a href=&quot;#1-1-打开终端，输入：&quot; class=&quot;headerlink&quot; title=&quot;1.1 打开终端，输入：&quot;&gt;&lt;/a&gt;1.1 打开终端，输入：&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 此命令显示隐藏文件 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 此命令关闭显示隐藏文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -bool false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-命令运行之后需要重新加载-Finder&quot;&gt;&lt;a href=&quot;#1-2-命令运行之后需要重新加载-Finder&quot; class=&quot;headerlink&quot; title=&quot;1.2 命令运行之后需要重新加载 Finder&quot;&gt;&lt;/a&gt;1.2 命令运行之后需要重新加载 Finder&lt;/h2&gt;&lt;p&gt;快捷键 &lt;code&gt;Option + Command + ESC&lt;/code&gt;，选中 &lt;code&gt;Finder&lt;/code&gt;，重新启动即可&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac" scheme="http://ehlxr.me/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Linux 的 nohup 命令的用法</title>
    <link href="http://ehlxr.me/2017/01/18/Linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://ehlxr.me/2017/01/18/Linux-的-nohup-命令的用法/</id>
    <published>2017-01-18T16:13:21.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 <code>nohup</code> 命令。</p>
</blockquote>
<h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nohup Command [ Arg … ] [ &amp; ]</div></pre></td></tr></table></figure>
<p>该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。<code>nohup</code> 就是不挂起的意思（<code>no hang up</code>）。</p>
<p><code>nohup</code> 运行由 <code>Command</code> 和相关的 <code>Arg</code> 参数指定的命令，忽略所有挂断（<code>SIGHUP</code>）信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示 <code>and</code> 的符号）到命令的尾部。</p>
<p>如果使用 <code>nohup</code> 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 <code>nohup.out</code> 的文件中，除非另外指定了输出文件。</p>
<a id="more"></a>
<h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<p>在上面的例子中，运行命令 <code>java -jar adapter-minisite.jar</code> 输入参数 <code>/tomcat-1</code> 和 <code>/tomcat-2</code>，输出被重定向到 <code>logs.txt</code> 文件中。</p>
<h1 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h1><p>如果运行的任务在当前 <code>shell</code> 终端，可以通过 <code>jobs</code> 命令查询相关信息，并且杀掉进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看当前 shell 终端的后台运行任务进程信息</span></div><div class="line">$ <span class="built_in">jobs</span></div><div class="line">[1]+ Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line"><span class="comment"># 杀掉任务号</span></div><div class="line">$ <span class="built_in">kill</span> %1</div><div class="line"></div><div class="line"><span class="comment"># 或着找到 pid</span></div><div class="line">$ <span class="built_in">jobs</span> <span class="_">-l</span></div><div class="line">[1]+ 11076 Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line">$ <span class="built_in">kill</span> 11076</div><div class="line"></div><div class="line"><span class="comment"># 或着</span></div><div class="line">$ <span class="built_in">fg</span> %n <span class="comment"># 置为前端运行</span></div><div class="line"></div><div class="line">Ctrl + c <span class="comment"># 退出</span></div></pre></td></tr></table></figure>
<p>如果非当前 <code>shell</code> 终端，可以通过 <code>ps auxf | grep &#39;adapter-minisite&#39;</code> 获取 <code>pid</code> 然后 <code>kill pid</code>。</p>
<hr>
<p><a href="http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html" target="_blank" rel="external">参考文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 &lt;code&gt;nohup&lt;/code&gt; 命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;命令简介&quot;&gt;&lt;a href=&quot;#命令简介&quot; class=&quot;headerlink&quot; title=&quot;命令简介&quot;&gt;&lt;/a&gt;命令简介&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ nohup Command [ Arg … ] [ &amp;amp; ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。&lt;code&gt;nohup&lt;/code&gt; 就是不挂起的意思（&lt;code&gt;no hang up&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt; 运行由 &lt;code&gt;Command&lt;/code&gt; 和相关的 &lt;code&gt;Arg&lt;/code&gt; 参数指定的命令，忽略所有挂断（&lt;code&gt;SIGHUP&lt;/code&gt;）信号。要运行后台中的 &lt;code&gt;nohup&lt;/code&gt; 命令，添加 &lt;code&gt;&amp;amp;&lt;/code&gt; （ 表示 &lt;code&gt;and&lt;/code&gt; 的符号）到命令的尾部。&lt;/p&gt;
&lt;p&gt;如果使用 &lt;code&gt;nohup&lt;/code&gt; 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 &lt;code&gt;nohup.out&lt;/code&gt; 的文件中，除非另外指定了输出文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="nohup" scheme="http://ehlxr.me/tags/nohup/"/>
    
  </entry>
  
  <entry>
    <title>Linux 中 fg、bg、jobs、&amp; 指令</title>
    <link href="http://ehlxr.me/2017/01/18/Linux-%E4%B8%AD-fg%E3%80%81bg%E3%80%81jobs%E3%80%81-%E6%8C%87%E4%BB%A4/"/>
    <id>http://ehlxr.me/2017/01/18/Linux-中-fg、bg、jobs、-指令/</id>
    <published>2017-01-18T15:30:16.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录总结一下 <code>Linux</code> 中 <code>fg</code>、<code>bg</code>、<code>jobs</code>、<code>&amp;</code>、<code>ctrl + z</code> 等相关指令对任务进程的操作。</p>
</blockquote>
<h1 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h1><h2 id="1-1-amp-和-jobs-指令"><a href="#1-1-amp-和-jobs-指令" class="headerlink" title="1.1 &amp; 和 jobs 指令"></a>1.1 <code>&amp;</code> 和 <code>jobs</code> 指令</h2><p><code>&amp;</code> 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。</p>
<p><code>jobs</code> 查看当前终端有多少在后台运行的进程。</p>
<ul>
<li><p><code>jobs</code> 命令执行的结果，<code>＋</code> 表示是一个当前的作业，<code>-</code> 减号表示是一个当前作业之后的一个作业。</p>
</li>
<li><p><code>jobs -l</code> 选项可显示所有任务的进程号 <code>pid</code></p>
</li>
<li><p><code>jobs</code> 的状态可以是 <code>running</code>，<code>stopped</code>，<code>terminated</code>。但是如果任务进程被终止了（<code>kill</code>），当前的终端环境中也就删除了任务的进程标识；也就是说 <strong>jobs 命令显示的是当前 shell 环境中后台正在运行或者被挂起的任务进程信息</strong></p>
</li>
</ul>
<a id="more"></a>
<h2 id="1-3-fg-和-bg-指令"><a href="#1-3-fg-和-bg-指令" class="headerlink" title="1.3 fg 和 bg 指令"></a>1.3 <code>fg</code> 和 <code>bg</code> 指令</h2><p><code>fg</code> 将后台任务进程调至前台继续运行，如果后台中有多个任务进程，可以用 <code>fg %num</code> 将选中的任务进程调至前台。</p>
<p><code>bg</code> 将挂起的任务进程重新启动运行，如果有多个暂停的任务进程，可以用 <code>bg %num</code> 将选中的任务进程启动运行。</p>
<blockquote>
<p><code>%num</code> 是通过 <code>jobs</code> 命令查到的后台正在执行的任务的序号（不是 <code>pid</code>）</p>
</blockquote>
<h1 id="二、进程的挂起"><a href="#二、进程的挂起" class="headerlink" title="二、进程的挂起"></a>二、进程的挂起</h1><h2 id="2-1-后台进程的挂起"><a href="#2-1-后台进程的挂起" class="headerlink" title="2.1 后台进程的挂起"></a>2.1 后台进程的挂起</h2><ul>
<li><p>在 <code>solaris</code> 中通过 <code>stop</code> 命令执行，通过 <code>jobs</code> 命令查看任务号（假设为 <code>num</code>），然后执行：<code>stop %num</code></p>
</li>
<li><p>在 <code>redhat</code> 中，不存在 <code>stop</code> 命令，可通过执行命令 <code>kill -stop PID</code>，将进程挂起</p>
</li>
</ul>
<h2 id="2-2-前台进程的挂起"><a href="#2-2-前台进程的挂起" class="headerlink" title="2.2 前台进程的挂起"></a>2.2 前台进程的挂起</h2><p><code>ctrl + z</code>：可以将一个正在前台执行的任务放到后台运行，并且挂起</p>
<h1 id="三、挂起进程重新运行"><a href="#三、挂起进程重新运行" class="headerlink" title="三、挂起进程重新运行"></a>三、挂起进程重新运行</h1><ul>
<li><p>通过 <code>bg %num</code> 即可将挂起的任务进程的状态由 <code>stopped</code> 改为 <code>running</code>，仍在后台运行</p>
</li>
<li><p>通过 <code>fg %num</code> 即可将挂起的任务进程转为前台执行</p>
</li>
</ul>
<h1 id="四、进程的终止"><a href="#四、进程的终止" class="headerlink" title="四、进程的终止"></a>四、进程的终止</h1><h2 id="4-1-后台进程的终止"><a href="#4-1-后台进程的终止" class="headerlink" title="4.1 后台进程的终止"></a>4.1 后台进程的终止</h2><ul>
<li><p>方法一： 通过 <code>jobs</code> 命令查看任务号（假设为 <code>num</code>），然后执行：<code>kill %num</code></p>
</li>
<li><p>方法二： 通过 <code>ps</code> 命令查看任务的进程号（<code>PID</code>，假设为 <code>pid</code>），然后执行：<code>kill pid</code></p>
</li>
</ul>
<h2 id="4-2-前台进程的终止"><a href="#4-2-前台进程的终止" class="headerlink" title="4.2 前台进程的终止"></a>4.2 前台进程的终止</h2><p>执行 <code>ctrl+c</code> 即可终止前台执行任务进程</p>
<blockquote>
<p>假设要后台运行 <code>xmms</code>，可通过命令：<code>xmms &amp;</code>。但万一你运行程序时忘记使用 <code>&amp;</code> 了，又不想重新执行，你可以先使用 <code>ctrl+z</code> 挂起任务进程，然后敲入<code>bg</code> 命令，这样任务进程就在后台继续运行了。</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录总结一下 &lt;code&gt;Linux&lt;/code&gt; 中 &lt;code&gt;fg&lt;/code&gt;、&lt;code&gt;bg&lt;/code&gt;、&lt;code&gt;jobs&lt;/code&gt;、&lt;code&gt;&amp;amp;&lt;/code&gt;、&lt;code&gt;ctrl + z&lt;/code&gt; 等相关指令对任务进程的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、基本用法&quot;&gt;&lt;a href=&quot;#一、基本用法&quot; class=&quot;headerlink&quot; title=&quot;一、基本用法&quot;&gt;&lt;/a&gt;一、基本用法&lt;/h1&gt;&lt;h2 id=&quot;1-1-amp-和-jobs-指令&quot;&gt;&lt;a href=&quot;#1-1-amp-和-jobs-指令&quot; class=&quot;headerlink&quot; title=&quot;1.1 &amp;amp; 和 jobs 指令&quot;&gt;&lt;/a&gt;1.1 &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;jobs&lt;/code&gt; 指令&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 查看当前终端有多少在后台运行的进程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 命令执行的结果，&lt;code&gt;＋&lt;/code&gt; 表示是一个当前的作业，&lt;code&gt;-&lt;/code&gt; 减号表示是一个当前作业之后的一个作业。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs -l&lt;/code&gt; 选项可显示所有任务的进程号 &lt;code&gt;pid&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 的状态可以是 &lt;code&gt;running&lt;/code&gt;，&lt;code&gt;stopped&lt;/code&gt;，&lt;code&gt;terminated&lt;/code&gt;。但是如果任务进程被终止了（&lt;code&gt;kill&lt;/code&gt;），当前的终端环境中也就删除了任务的进程标识；也就是说 &lt;strong&gt;jobs 命令显示的是当前 shell 环境中后台正在运行或者被挂起的任务进程信息&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[转]CentOS 升级 kernel</title>
    <link href="http://ehlxr.me/2017/01/10/%E8%BD%AC-CentOS-%E5%8D%87%E7%BA%A7-kernel/"/>
    <id>http://ehlxr.me/2017/01/10/转-CentOS-升级-kernel/</id>
    <published>2017-01-10T11:01:09.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、手动档"><a href="#一、手动档" class="headerlink" title="一、手动档"></a>一、手动档</h1><p>手动档就是从源码开始编译内核安装，好处是可以自己选择任意版本的内核，缺点就是耗时长，编译安装消耗系统资源</p>
<h2 id="1-1、获取-kernel-源码"><a href="#1-1、获取-kernel-源码" class="headerlink" title="1.1、获取 kernel 源码"></a>1.1、获取 kernel 源码</h2><p>这世界上最伟大的 Linux 内核源码下载地址是 <a href="https://kernel.org/" target="_blank" rel="external">kernel</a> 官网，选择一个稳定版本下载即可</p>
<h2 id="1-2、解压并清理"><a href="#1-2、解压并清理" class="headerlink" title="1.2、解压并清理"></a>1.2、解压并清理</h2><p>官方要求将其解压到 <code>/usr/src</code> 目录，其实在哪都可以，为了规范一点索性也解压到此位置，然后为了防止编译残留先做一次清理动作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载内核源码</span></div><div class="line">$ wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz</div><div class="line"></div><div class="line"><span class="comment"># 解压并移动到 /usr/src</span></div><div class="line">$ tar -Jxvf linux-4.8.6.tar.xz</div><div class="line">$ mv linux-4.8.6 /usr/src/kernels</div><div class="line"></div><div class="line"><span class="comment"># 执行清理（没 gcc 的要装一下）</span></div><div class="line">$ <span class="built_in">cd</span> /usr/src/kernels/linux-4.8.6</div><div class="line">$ make mrproper &amp;&amp; make clean</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-3、生成编译配置表"><a href="#1-3、生成编译配置表" class="headerlink" title="1.3、生成编译配置表"></a>1.3、生成编译配置表</h2><p>kernel 在编译时需要一个配置文件（<code>.config</code>），用于描述开启哪些特性等，该文件一般可通过一下四种途径获得:</p>
<ul>
<li>复制当前系统编译配置表，即 <code>cp /boot/config-xxx .config</code>；如果系统有多个内核，那么根据版本号选择最新的即可</li>
<li>使用 <code>make defconfig</code> 命令获取当前系统编译配置表，该命令会自动写入到 <code>.config</code> 中</li>
<li>使用 <code>make localmodconfig</code> 命令开启交互模式，然后根据提示生成编译配置表</li>
<li>使用 <code>make oldconfig</code> 命令根据旧的编译配置表生成新的编译配置表，<strong>刚方式会直接读取旧的便已配置表，并在以前没有设定过的配置时会自动开启交互模式</strong></li>
</ul>
<p>这里采用最后一种方式生成</p>
<h2 id="1-4、编译并安装"><a href="#1-4、编译并安装" class="headerlink" title="1.4、编译并安装"></a>1.4、编译并安装</h2><p>内核配置表生成完成后便可进行编译和安装（需要安装 <code>bc、openssl-devel</code> 等）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ make</div><div class="line">$ make modules</div><div class="line">$ make modules_install</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>最后执行重启验证即可，验证成功后可删除旧的内核</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 检索已安装的内核</span></div><div class="line">$ sudo rpm -qa | grep kernel</div><div class="line"></div><div class="line"><span class="comment"># 删除指定的内核</span></div><div class="line">$ sudo rpm <span class="_">-e</span> kernel-3.10.0-327.el7.x86_64</div></pre></td></tr></table></figure>
<h1 id="二、自动档"><a href="#二、自动档" class="headerlink" title="二、自动档"></a>二、自动档</h1><p>相对于手动档编译安装，CentOS 还可以通过使用 <a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="external">elrepo</a> 源的方式直接安装最新稳定版 kernel，脚本如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># import key</span></div><div class="line">$ sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line"></div><div class="line"><span class="comment"># install elrepo repo</span></div><div class="line">$ sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment"># install kernel</span></div><div class="line">$ sudo yum --enablerepo=elrepo-kernel install  kernel-ml-devel kernel-ml -y</div><div class="line"></div><div class="line"><span class="comment"># modify grub</span></div><div class="line">$ sudo grub2-set-default 0</div><div class="line"></div><div class="line"><span class="comment"># reboot system</span></div><div class="line">$ sudo reboot</div></pre></td></tr></table></figure>
<p><a href="https://mritd.me/2016/11/08/update-centos-kernel/" target="_blank" rel="external">原文地址</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、手动档&quot;&gt;&lt;a href=&quot;#一、手动档&quot; class=&quot;headerlink&quot; title=&quot;一、手动档&quot;&gt;&lt;/a&gt;一、手动档&lt;/h1&gt;&lt;p&gt;手动档就是从源码开始编译内核安装，好处是可以自己选择任意版本的内核，缺点就是耗时长，编译安装消耗系统资源&lt;/p&gt;
&lt;h2 id=&quot;1-1、获取-kernel-源码&quot;&gt;&lt;a href=&quot;#1-1、获取-kernel-源码&quot; class=&quot;headerlink&quot; title=&quot;1.1、获取 kernel 源码&quot;&gt;&lt;/a&gt;1.1、获取 kernel 源码&lt;/h2&gt;&lt;p&gt;这世界上最伟大的 Linux 内核源码下载地址是 &lt;a href=&quot;https://kernel.org/&quot;&gt;kernel&lt;/a&gt; 官网，选择一个稳定版本下载即可&lt;/p&gt;
&lt;h2 id=&quot;1-2、解压并清理&quot;&gt;&lt;a href=&quot;#1-2、解压并清理&quot; class=&quot;headerlink&quot; title=&quot;1.2、解压并清理&quot;&gt;&lt;/a&gt;1.2、解压并清理&lt;/h2&gt;&lt;p&gt;官方要求将其解压到 &lt;code&gt;/usr/src&lt;/code&gt; 目录，其实在哪都可以，为了规范一点索性也解压到此位置，然后为了防止编译残留先做一次清理动作&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载内核源码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 解压并移动到 /usr/src&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tar -Jxvf linux-4.8.6.tar.xz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ mv linux-4.8.6 /usr/src/kernels&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行清理（没 gcc 的要装一下）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/src/kernels/linux-4.8.6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ make mrproper &amp;amp;&amp;amp; make clean&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="kernel" scheme="http://ehlxr.me/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Docker 利用数据卷容器来备份、恢复、迁移数据</title>
    <link href="http://ehlxr.me/2017/01/09/Docker-%E5%88%A9%E7%94%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8%E6%9D%A5%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D%E3%80%81%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE/"/>
    <id>http://ehlxr.me/2017/01/09/Docker-利用数据卷容器来备份、恢复、迁移数据/</id>
    <published>2017-01-09T16:54:24.000Z</published>
    <updated>2017-04-12T05:58:32.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在 Docker 容器之间如果需要共享数据，可以创建一个数据卷容器来实现，并且可以方便的通过数据卷容器来备份、恢复、迁移数据。</p>
</blockquote>
<h1 id="创建数据卷容器"><a href="#创建数据卷容器" class="headerlink" title="创建数据卷容器"></a>创建数据卷容器</h1><p>创建一个名为：dbdata 的数据卷容器；设置挂载点为 <code>/vdata</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run <span class="_">-d</span> -v /vdata --name dbdata alpine sh</div></pre></td></tr></table></figure>
<p>数据卷容器是一个普通的 Docker 容器，可以不需要启动。<br><a id="more"></a></p>
<h1 id="使用数据卷容器"><a href="#使用数据卷容器" class="headerlink" title="使用数据卷容器"></a>使用数据卷容器</h1><p>使用命令 <code>--volumes-from</code> 创建挂载数据卷容器 dbdata 的容器：db1、db2。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -it --volumes-from dbdata --name db1 alpine sh</div><div class="line"></div><div class="line">$ sudo docker run -it --volumes-from dbdata --name db1 alpine sh</div></pre></td></tr></table></figure>
<p>在容器 db1 的挂载目录 <code>/vdata</code> 目录下，创建文件 1.txt 等测试数据，查看容器 db2 的挂载目录 <code>/vdata</code> 目录，就可以看到创建的文件数据了。</p>
<h1 id="备份数据卷数据"><a href="#备份数据卷数据" class="headerlink" title="备份数据卷数据"></a>备份数据卷数据</h1><p>使用一个临时容器，完成备份数据容器操作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --rm --volumes-from dbdata -v $(<span class="built_in">pwd</span>):/backup alpine tar cvf /backup/vdata-bak.tar /vdata</div></pre></td></tr></table></figure>
<p>使用 <code>tar cvf</code> 命令，备份数据卷容器 dbdata 中的目录 <code>/vdata</code> 为 <code>vdata-bak.tar</code>，并挂载到宿主机的当前目录下。</p>
<h1 id="恢复数据卷数据"><a href="#恢复数据卷数据" class="headerlink" title="恢复数据卷数据"></a>恢复数据卷数据</h1><p>创建数据卷容器：dbdata2</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run <span class="_">-d</span> -v /vdata --name dbdata2 alpine sh</div></pre></td></tr></table></figure>
<p>使用一个临时容器，恢复备份数据 <code>vdata-bak.tar</code> 到 dbdata2</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --rm --volumes-from dbdata2 -v $(<span class="built_in">pwd</span>):/backup alpine tar xvf /backup/vdata-bak.tar</div></pre></td></tr></table></figure>
<p>使用一个临时容器，查看 dbdata2 恢复的数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run --rm --volumes-from dbdata2 alpine /bin/ls /vdata</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在 Docker 容器之间如果需要共享数据，可以创建一个数据卷容器来实现，并且可以方便的通过数据卷容器来备份、恢复、迁移数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;创建数据卷容器&quot;&gt;&lt;a href=&quot;#创建数据卷容器&quot; class=&quot;headerlink&quot; title=&quot;创建数据卷容器&quot;&gt;&lt;/a&gt;创建数据卷容器&lt;/h1&gt;&lt;p&gt;创建一个名为：dbdata 的数据卷容器；设置挂载点为 &lt;code&gt;/vdata&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo docker run &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; -v /vdata --name dbdata alpine sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据卷容器是一个普通的 Docker 容器，可以不需要启动。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ehlxr.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://ehlxr.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装Python3、pip3</title>
    <link href="http://ehlxr.me/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/"/>
    <id>http://ehlxr.me/2017/01/07/CentOS-7-安装-Python3、pip3/</id>
    <published>2017-01-07T19:23:22.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。</p>
<h1 id="一、安装-Python-3"><a href="#一、安装-Python-3" class="headerlink" title="一、安装 Python 3"></a>一、安装 Python 3</h1><h2 id="1-1-安装准备"><a href="#1-1-安装准备" class="headerlink" title="1.1 安装准备"></a>1.1 安装准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir /usr/<span class="built_in">local</span>/python3 <span class="comment"># 创建安装目录</span></div><div class="line"></div><div class="line"><span class="comment"># 下载 Python 源文件</span></div><div class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</div><div class="line"><span class="comment"># 注意：wget获取https的时候要加上：--no-check-certificate</span></div><div class="line"></div><div class="line">$ tar -xzvf Python-3.6.0.tgz <span class="comment"># 解压缩包</span></div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> Python-3.6.0 <span class="comment"># 进入解压目录</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2-编译安装"><a href="#1-2-编译安装" class="headerlink" title="1.2 编译安装"></a>1.2 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo ./configure --prefix=/usr/<span class="built_in">local</span>/python3 <span class="comment"># 指定创建的目录</span></div><div class="line"></div><div class="line">$ sudo make</div><div class="line"></div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<h2 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h2><h3 id="1-3-1-两个版本共存"><a href="#1-3-1-两个版本共存" class="headerlink" title="1.3.1 两个版本共存"></a>1.3.1 两个版本共存</h3><p>创建 python3 的软链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</div></pre></td></tr></table></figure>
<p>这样就可以通过 <code>python</code> 命令使用 Python 2，<code>python3</code> 来使用 Python 3。</p>
<h3 id="1-3-2-修改默认为-Python-3"><a href="#1-3-2-修改默认为-Python-3" class="headerlink" title="1.3.2 修改默认为 Python 3"></a>1.3.2 修改默认为 Python 3</h3><p>将 <code>/usr/bin</code> 中的 <code>python</code> 备份</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mv python python.bak</div></pre></td></tr></table></figure>
<p>然后创建 python3 的软链接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python</div></pre></td></tr></table></figure>
<p>这样默认的 Python 版本就替换为 Python 3 了。</p>
<p>因为 yum 使用 Python 2，因此替换为 Python 3 后可能无法正常工作，因此修改 yum 配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /usr/bin/yum</div></pre></td></tr></table></figure>
<p>将第一行指定的 python 版本改为 python2.7（<code>#!/usr/bin/python</code> 改为 <code>#!/usr/bin/python2.7</code>）</p>
<h1 id="二、安装-pip"><a href="#二、安装-pip" class="headerlink" title="二、安装 pip"></a>二、安装 pip</h1><h2 id="2-1-yum-安装"><a href="#2-1-yum-安装" class="headerlink" title="2.1 yum 安装"></a>2.1 yum 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先安装 epel 扩展源</span></div><div class="line">$ sudo yum -y install epel-release</div><div class="line"></div><div class="line"><span class="comment"># 安装 python-pip</span></div><div class="line">$ sudo yum -y install python-pip</div><div class="line"></div><div class="line"><span class="comment"># 清除 cache</span></div><div class="line">$ sudo yum clean all</div></pre></td></tr></table></figure>
<p>通过这种方式貌似只能安装 pip2，想要安装 Python 3 的 pip，可以通过以下的源代码安装方式。</p>
<h2 id="2-2-源码安装"><a href="#2-2-源码安装" class="headerlink" title="2.2 源码安装"></a>2.2 源码安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载源代码</span></div><div class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</div><div class="line"></div><div class="line">$ tar -zvxf 9.0.1 -C pip-9.0.1    <span class="comment"># 解压文件</span></div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> pip-9.0.1</div><div class="line"></div><div class="line"><span class="comment"># 使用 Python 3 安装</span></div><div class="line">$ python3 setup.py install</div></pre></td></tr></table></figure>
<p>创建链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/python3/bin/pip /usr/bin/pip3</div></pre></td></tr></table></figure>
<h2 id="2-3-升级-pip"><a href="#2-3-升级-pip" class="headerlink" title="2.3 升级 pip"></a>2.3 升级 pip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install --upgrade pip</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。&lt;/p&gt;
&lt;h1 id=&quot;一、安装-Python-3&quot;&gt;&lt;a href=&quot;#一、安装-Python-3&quot; class=&quot;headerlink&quot; title=&quot;一、安装 Python 3&quot;&gt;&lt;/a&gt;一、安装 Python 3&lt;/h1&gt;&lt;h2 id=&quot;1-1-安装准备&quot;&gt;&lt;a href=&quot;#1-1-安装准备&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装准备&quot;&gt;&lt;/a&gt;1.1 安装准备&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo mkdir /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python3 &lt;span class=&quot;comment&quot;&gt;# 创建安装目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载 Python 源文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注意：wget获取https的时候要加上：--no-check-certificate&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tar -xzvf Python-3.6.0.tgz &lt;span class=&quot;comment&quot;&gt;# 解压缩包&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; Python-3.6.0 &lt;span class=&quot;comment&quot;&gt;# 进入解压目录&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="Python" scheme="http://ehlxr.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Good bye 2016...</title>
    <link href="http://ehlxr.me/2016/12/31/Good-bye-2016/"/>
    <id>http://ehlxr.me/2016/12/31/Good-bye-2016/</id>
    <published>2016-12-31T12:51:14.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<p>时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…</p>
<p>印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…</p>
<a id="more"></a>
<p>总结 2016，收获，知足，感恩…眼前的要珍惜，来之不易的拥有更要珍惜。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=35307971&auto=1&height=66"></iframe>

<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…&lt;/p&gt;
&lt;p&gt;印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>[转]shell 中单引号、双引号、反引号、反斜杠区别</title>
    <link href="http://ehlxr.me/2016/12/30/%E8%BD%AC-shell-%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8C%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%8C%BA%E5%88%AB/"/>
    <id>http://ehlxr.me/2016/12/30/转-shell-中单引号、双引号、反引号、反斜杠区别/</id>
    <published>2016-12-30T15:36:51.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>shell</code> 可以识别 <code>4</code> 种不同类型的引字符号：单引号字符 <code>&#39;</code>，双引号字符 <code>&quot;</code>，反斜杠字符 <code>\</code>，反引号字符 <code>`</code> ，学习 <code>shell</code> 编程的朋友可以看下。</p>
</blockquote>
<h1 id="1-单引号-39"><a href="#1-单引号-39" class="headerlink" title="1. 单引号( &#39; )"></a>1. 单引号( <code>&#39;</code> )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ grep Susan phonebook</div><div class="line">Susan Goldberg 403-212-4921</div><div class="line">Susan Topple 212-234-2343</div></pre></td></tr></table></figure>
<p>如果我们想查找的是 <code>Susan Goldberg</code>，不能直接使用 <code>grep Susan Goldberg phonebook</code> 命令，<code>grep</code> 会把 <code>Goldberg</code> 和 <code>phonebook</code> 当作需要搜索的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ grep &apos;Susan Gold&apos; phonebook</div><div class="line">Susan Goldberg 403-212-4921</div></pre></td></tr></table></figure>
<p>当 <code>shell</code> 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。<br><a id="more"></a></p>
<h1 id="2-双引号-quot"><a href="#2-双引号-quot" class="headerlink" title="2. 双引号( &quot; )"></a>2. 双引号( <code>&quot;</code> )</h1><p>双引号作用与单引号类似，区别在于它没有那么严格。单引号告诉 <code>shell</code> 忽略所有特殊字符，而双引号只要求忽略大多数，具体说，括在双引号中的三种特殊字符不被忽略：<code>$</code>、<code>\</code>、<code>`</code>。即双引号会解释字符串的特别意思，而单引号直接使用字符串。如果使用双引号将字符串赋给变量并反馈它，实际上与直接反馈变量并无差别。如果要查询包含空格的字符串，经常会用到双引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ x=*</div><div class="line">$ echo $x</div><div class="line">hello.sh menus.sh misc.sh phonebook tshift.sh</div><div class="line"></div><div class="line">$ echo &apos;$x&apos;</div><div class="line">$x</div><div class="line"></div><div class="line">$ echo &quot;$x&quot;</div><div class="line">*</div></pre></td></tr></table></figure>
<p>这个例子可以看出无引号，单引号和双引号之间的区别。在最后一种情况中，双引号告诉 <code>shell</code> 在引号内照样进行变量名替换，所以 <code>shell</code> 把 <code>$x</code> 替换为 <code>＊</code>，因为双引号中不做文件名替换，所以就把 <code>＊</code> 作为要显示的值传递给 <code>echo</code>。</p>
<p>对于第一种情况需要进一步说明，<code>shell</code> 在给变量赋值时不进行文件名替换（这从第三种情况中也能看出来），各步骤发生的精确次序如下： <code>shell</code> 扫描命令行，把 <code>x</code> 的值设为星号 <code>＊</code>；<br><code>shell</code> 再次扫描命令行，碰到星号 <code>＊</code>，把它替换成当前目录下的文件清单；<code>shell</code> 启动执行 <code>echo</code> 命令，把文件清单作为参数传递给 <code>echo</code>。</p>
<p>这个赋值的先后次序非常重要：<code>shell</code> 先作变量替换，然后作文件名替换，最后把这行处理为参数。</p>
<h1 id="3-反引号"><a href="#3-反引号" class="headerlink" title="3. 反引号(`)"></a>3. 反引号(<code>`</code>)</h1><p>命令替换是指 <code>shell</code> 能够将一个命令的标准输出插在一个命令行中任何位置。<code>shell</code> 中有两种方法作命令替换：把 <code>shell</code> 命令用反引号或者 <code>$(...)</code> 结构括起来，其中 <code>$(...)</code> 格式受到 <code>POSIX</code> 标准支持，也利于嵌套。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ echo The date and time is `date`</div><div class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</div><div class="line"></div><div class="line">$ echo The date and time is $(date)</div><div class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</div><div class="line"></div><div class="line">$ echo Your current working directory is $(pwd)</div><div class="line">Your current working directory is /home/howard/script</div></pre></td></tr></table></figure>
<h1 id="4-反斜杠-backslash-escaped"><a href="#4-反斜杠-backslash-escaped" class="headerlink" title="4. 反斜杠 backslash-escaped( \ )"></a>4. 反斜杠 backslash-escaped( <code>\</code> )</h1><p>反斜杠一般用作转义字符，或称逃脱字符。<code>Linux</code> 如果 <code>echo</code> 要让转义字符发生作用，就要使用 <code>-e</code> 选项，且转义字符要使用双引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo -e &quot;\n&quot;</div></pre></td></tr></table></figure>
<p>反斜杠的另一种作用，就是当反斜杠用于一行的最后一个字符时，<strong><code>shell</code> 把行尾的反斜杠作为续行</strong>，这种结构在分几行输入长命令时经常使用。</p>
<hr>
<p><a href="http://www.jb51.net/article/33495.htm" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt; 可以识别 &lt;code&gt;4&lt;/code&gt; 种不同类型的引字符号：单引号字符 &lt;code&gt;&amp;#39;&lt;/code&gt;，双引号字符 &lt;code&gt;&amp;quot;&lt;/code&gt;，反斜杠字符 &lt;code&gt;\&lt;/code&gt;，反引号字符 &lt;code&gt;`&lt;/code&gt; ，学习 &lt;code&gt;shell&lt;/code&gt; 编程的朋友可以看下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-单引号-39&quot;&gt;&lt;a href=&quot;#1-单引号-39&quot; class=&quot;headerlink&quot; title=&quot;1. 单引号( &amp;#39; )&quot;&gt;&lt;/a&gt;1. 单引号( &lt;code&gt;&amp;#39;&lt;/code&gt; )&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ grep Susan phonebook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Susan Goldberg 403-212-4921&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Susan Topple 212-234-2343&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想查找的是 &lt;code&gt;Susan Goldberg&lt;/code&gt;，不能直接使用 &lt;code&gt;grep Susan Goldberg phonebook&lt;/code&gt; 命令，&lt;code&gt;grep&lt;/code&gt; 会把 &lt;code&gt;Goldberg&lt;/code&gt; 和 &lt;code&gt;phonebook&lt;/code&gt; 当作需要搜索的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ grep &amp;apos;Susan Gold&amp;apos; phonebook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Susan Goldberg 403-212-4921&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 &lt;code&gt;shell&lt;/code&gt; 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="shell" scheme="http://ehlxr.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 Nginx</title>
    <link href="http://ehlxr.me/2016/12/23/CentOS-%E5%AE%89%E8%A3%85-Nginx/"/>
    <id>http://ehlxr.me/2016/12/23/CentOS-安装-Nginx/</id>
    <published>2016-12-23T11:20:44.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h1><p>首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ yum install gcc-c++</div><div class="line">$ yum install pcre pcre-devel</div><div class="line">$ yum install zlib zlib-devel</div><div class="line">$ yum install openssl openssl--devel</div></pre></td></tr></table></figure>
<h1 id="二、安装-Nginx"><a href="#二、安装-Nginx" class="headerlink" title="二、安装 Nginx"></a>二、安装 Nginx</h1><p>安装之前，最好检查一下是否已经安装有 Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find -name nginx</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果系统已经安装了 Nginx，那么就先卸载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum remove nginx</div></pre></td></tr></table></figure>
<p>首先进入 /usr/local 目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<p>从官网下载最新版的 Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget http://nginx.org/download/nginx-1.9.6.tar.gz</div><div class="line">$ tar -zxvf nginx-1.9.6.tar.gz</div><div class="line">$ <span class="built_in">cd</span> nginx-1.9.6</div></pre></td></tr></table></figure>
<p>接下来安装，使用 <code>--prefix</code> 参数指定 Nginx 安装的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./configure  <span class="comment"># 默认安装在 /usr/local/nginx</span></div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>如果没有报错，顺利完成后，最好看一下 nginx 的安装目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ whereis nginx</div></pre></td></tr></table></figure>
<p>安装完毕后，进入安装后目录（/usr/local/nginx）便可以启动或停止它了。</p>
<h1 id="二、基本操作命令"><a href="#二、基本操作命令" class="headerlink" title="二、基本操作命令"></a>二、基本操作命令</h1><h2 id="2-1-启动命令"><a href="#2-1-启动命令" class="headerlink" title="2.1 启动命令"></a>2.1 启动命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<h2 id="2-2-重启命令"><a href="#2-2-重启命令" class="headerlink" title="2.2 重启命令"></a>2.2 重启命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="_">-s</span> reload</div></pre></td></tr></table></figure>
<h2 id="2-3-停止命令"><a href="#2-3-停止命令" class="headerlink" title="2.3 停止命令"></a>2.3 停止命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf  <span class="_">-s</span> stop</div></pre></td></tr></table></figure>
<p><code>-c</code> 制定配置文件的路径，如果不加 Nginx 会自动加载默认路径的配置文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装准备&quot;&gt;&lt;a href=&quot;#一、安装准备&quot; class=&quot;headerlink&quot; title=&quot;一、安装准备&quot;&gt;&lt;/a&gt;一、安装准备&lt;/h1&gt;&lt;p&gt;首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ yum install gcc-c++&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ yum install pcre pcre-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ yum install zlib zlib-devel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ yum install openssl openssl--devel&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;二、安装-Nginx&quot;&gt;&lt;a href=&quot;#二、安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;二、安装 Nginx&quot;&gt;&lt;/a&gt;二、安装 Nginx&lt;/h1&gt;&lt;p&gt;安装之前，最好检查一下是否已经安装有 Nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ find -name nginx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="Nginx" scheme="http://ehlxr.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 rar、zip 解压缩</title>
    <link href="http://ehlxr.me/2016/12/22/CentOS-%E5%AE%89%E8%A3%85-rar%E3%80%81zip-%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    <id>http://ehlxr.me/2016/12/22/CentOS-安装-rar、zip-解压缩/</id>
    <published>2016-12-22T15:39:45.000Z</published>
    <updated>2017-04-12T05:58:32.904Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。</p>
<h1 id="一、rar-安装使用"><a href="#一、rar-安装使用" class="headerlink" title="一、rar 安装使用"></a>一、rar 安装使用</h1><p>Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：<a href="http://www.rarsoft.com/download.htm。" target="_blank" rel="external">http://www.rarsoft.com/download.htm。</a></p>
<h2 id="1-1-下载系统对应的版本"><a href="#1-1-下载系统对应的版本" class="headerlink" title="1.1 下载系统对应的版本"></a>1.1 下载系统对应的版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz</div></pre></td></tr></table></figure>
<h2 id="1-2-解压、安装"><a href="#1-2-解压、安装" class="headerlink" title="1.2 解压、安装"></a>1.2 解压、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf rarlinux-x64-5.4.0.tar.gz</div><div class="line">$ <span class="built_in">cd</span> rar</div><div class="line">$ make</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>看见下面这些信息就是安装成功了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/<span class="built_in">local</span>/bin</div><div class="line">mkdir -p /usr/<span class="built_in">local</span>/lib</div><div class="line">cp rar unrar /usr/<span class="built_in">local</span>/bin</div><div class="line">cp rarfiles.lst /etc</div><div class="line">cp default.sfx /usr/<span class="built_in">local</span>/lib</div></pre></td></tr></table></figure>
<h2 id="1-3-常用-rar-命令"><a href="#1-3-常用-rar-命令" class="headerlink" title="1.3 常用 rar 命令"></a>1.3 常用 rar 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rar x centos.rar <span class="comment"># 解压 centos.rar 到当前目录</span></div><div class="line">$ rar centos.rar ./piaoyi.org/ <span class="comment"># 将 piaoyi.org 目录打包为 centos.rar</span></div></pre></td></tr></table></figure>
<h2 id="1-4-常见错误原因分析"><a href="#1-4-常见错误原因分析" class="headerlink" title="1.4 常见错误原因分析"></a>1.4 常见错误原因分析</h2><h3 id="1-4-1-如果在运行命令-rar-时-出现下面这个问题"><a href="#1-4-1-如果在运行命令-rar-时-出现下面这个问题" class="headerlink" title="1.4.1 如果在运行命令 rar 时,出现下面这个问题"></a>1.4.1 如果在运行命令 rar 时,出现下面这个问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rar: /lib/i686/nosegneg/libc.so.6: version <span class="string">'GLIBC_2.7'</span> not found (required by rar)</div></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp rar_static /usr/<span class="built_in">local</span>/bin/rar</div></pre></td></tr></table></figure>
<h3 id="1-4-2-使用-rar-的时候出现错误"><a href="#1-4-2-使用-rar-的时候出现错误" class="headerlink" title="1.4.2 使用 rar 的时候出现错误"></a>1.4.2 使用 rar 的时候出现错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash: /usr/<span class="built_in">local</span>/bin/rar: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</div></pre></td></tr></table></figure>
<p>因为 64 位系统中安装了 32 位程序，解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install glibc.i686</div></pre></td></tr></table></figure>
<h3 id="1-4-3-重新安装-glibc-i686-以后还有如下类似错误"><a href="#1-4-3-重新安装-glibc-i686-以后还有如下类似错误" class="headerlink" title="1.4.3 重新安装 glibc.i686 以后还有如下类似错误"></a>1.4.3 重新安装 glibc.i686 以后还有如下类似错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error <span class="keyword">while</span> loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<p>再继续安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install libstdc++.so.6</div></pre></td></tr></table></figure>
<h1 id="二、zip-unzip-安装使用"><a href="#二、zip-unzip-安装使用" class="headerlink" title="二、zip/unzip 安装使用"></a>二、zip/unzip 安装使用</h1><h2 id="2-1-检查是否有包含-zip（unzip）-的软件包"><a href="#2-1-检查是否有包含-zip（unzip）-的软件包" class="headerlink" title="2.1 检查是否有包含 zip（unzip） 的软件包"></a>2.1 检查是否有包含 zip（unzip） 的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ yum provides zip</div><div class="line">Loaded plugins: fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: mirrors.cqu.edu.cn</div><div class="line"> * extras: mirrors.cqu.edu.cn</div><div class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</div><div class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</div><div class="line">Repo        : base</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</div><div class="line">Repo        : @base</div></pre></td></tr></table></figure>
<h2 id="2-2-安装-zip、unzip"><a href="#2-2-安装-zip、unzip" class="headerlink" title="2.2 安装 zip、unzip"></a>2.2 安装 zip、unzip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install zip</div><div class="line">$ yum install unzip</div></pre></td></tr></table></figure>
<h2 id="2-3-常用命令"><a href="#2-3-常用命令" class="headerlink" title="2.3 常用命令"></a>2.3 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ zip -r myfile.zip ./*</div><div class="line"><span class="comment"># 将当前目录下的所有文件和文件夹全部压缩成 myfile.zip 文件，-r 表示递归压缩子目录下所有文件.</span></div><div class="line"></div><div class="line">$ unzip -o <span class="_">-d</span> /home/sunny myfile.zip</div><div class="line"><span class="comment"># 把 myfile.zip 文件解压到 /home/sunny/</span></div><div class="line"><span class="comment"># -o ：不提示的情况下覆盖文件</span></div><div class="line"><span class="comment"># -d：将文件解压缩到指定目录下</span></div><div class="line"></div><div class="line">$ zip <span class="_">-d</span> myfile.zip smart.txt</div><div class="line"><span class="comment"># 删除压缩文件中 smart.txt 文件</span></div><div class="line"></div><div class="line">$ zip -m myfile.zip ./rpm_info.txt</div><div class="line"><span class="comment"># 向压缩文件中 myfile.zip 中添加 rpm_info.txt 文件</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。&lt;/p&gt;
&lt;h1 id=&quot;一、rar-安装使用&quot;&gt;&lt;a href=&quot;#一、rar-安装使用&quot; class=&quot;headerlink&quot; title=&quot;一、rar 安装使用&quot;&gt;&lt;/a&gt;一、rar 安装使用&lt;/h1&gt;&lt;p&gt;Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：&lt;a href=&quot;http://www.rarsoft.com/download.htm。&quot;&gt;http://www.rarsoft.com/download.htm。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-下载系统对应的版本&quot;&gt;&lt;a href=&quot;#1-1-下载系统对应的版本&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载系统对应的版本&quot;&gt;&lt;/a&gt;1.1 下载系统对应的版本&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-解压、安装&quot;&gt;&lt;a href=&quot;#1-2-解压、安装&quot; class=&quot;headerlink&quot; title=&quot;1.2 解压、安装&quot;&gt;&lt;/a&gt;1.2 解压、安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ tar -zxvf rarlinux-x64-5.4.0.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; rar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ make&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://ehlxr.me/tags/CentOS/"/>
    
      <category term="rar" scheme="http://ehlxr.me/tags/rar/"/>
    
      <category term="zip" scheme="http://ehlxr.me/tags/zip/"/>
    
  </entry>
  
  <entry>
    <title>Vim Tab 设置为 4 个空格</title>
    <link href="http://ehlxr.me/2016/12/02/Vim-Tab-%E8%AE%BE%E7%BD%AE%E4%B8%BA-4-%E4%B8%AA%E7%A9%BA%E6%A0%BC/"/>
    <id>http://ehlxr.me/2016/12/02/Vim-Tab-设置为-4-个空格/</id>
    <published>2016-12-02T20:46:05.000Z</published>
    <updated>2017-04-12T05:58:32.904Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>vim</code> 的配置文件中（Liunx：<code>/etc/vimrc</code>）中添加以下代码后，重启 <code>vim</code> 即可实现按 <code>TAB</code> 产生 <code>4</code> 个空格：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> ts=4 <span class="comment"># 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格</span></div><div class="line"><span class="built_in">set</span> expandtab</div></pre></td></tr></table></figure>
<p>对于已保存的文件，可以使用下面的方法进行空格和 <code>TAB</code> 的替换：</p>
<p><code>TAB</code> 替换为空格：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> ts=4</div><div class="line">:<span class="built_in">set</span> expandtab</div><div class="line">:%retab!</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>空格替换为 <code>TAB</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:<span class="built_in">set</span> ts=4</div><div class="line">:<span class="built_in">set</span> noexpandtab</div><div class="line">:%retab!</div></pre></td></tr></table></figure>
<p>加 <code>!</code> 是用于处理非空白字符之后的 <code>TAB</code>，即所有的 <code>TAB</code>，若不加 <code>!</code>，则只处理行首的 <code>TAB</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;vim&lt;/code&gt; 的配置文件中（Liunx：&lt;code&gt;/etc/vimrc&lt;/code&gt;）中添加以下代码后，重启 &lt;code&gt;vim&lt;/code&gt; 即可实现按 &lt;code&gt;TAB&lt;/code&gt; 产生 &lt;code&gt;4&lt;/code&gt; 个空格：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ts=4 &lt;span class=&quot;comment&quot;&gt;# 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expandtab&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于已保存的文件，可以使用下面的方法进行空格和 &lt;code&gt;TAB&lt;/code&gt; 的替换：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TAB&lt;/code&gt; 替换为空格：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;:&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ts=4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expandtab&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:%retab!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vim" scheme="http://ehlxr.me/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>忙忙碌碌的十一月份</title>
    <link href="http://ehlxr.me/2016/11/30/%E5%BF%99%E5%BF%99%E7%A2%8C%E7%A2%8C%E7%9A%84%E5%8D%81%E4%B8%80%E6%9C%88%E4%BB%BD/"/>
    <id>http://ehlxr.me/2016/11/30/忙忙碌碌的十一月份/</id>
    <published>2016-11-30T20:04:13.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<p>早就有计划在西安买房，一直觉得还早，主要是没钱，近期有人肯借钱就想看看市场。买房需要做很多准备工作，本想着慢慢先看着，一边从同学朋友那里打听消息，一边从网上看各个楼盘信息，怎奈越看越着急，就想一下子赶紧买了。看中的两个楼盘，价格其实都远远超过自己的预算和目前能承受的能力，不得不说我是一个容易被蛊惑的人，听着置业顾问的天花乱坠的描述，有好几次都差点都掉坑里了。</p>
<p><img src="http://oapjp6spr.bkt.clouddn.com/20161130202110.jpg" alt=""></p>
<a id="more"></a>
<p>不得不吐槽ZF的户口、档案制度，不知道坑了多少人。上大学的时候响应学校的号召，傻乎乎的把户口从老家迁到了学校，现在也没想明白把户口迁过去是为了什么。毕业后二不拉几的嫌麻烦就随大流没有及时把户口、档案迁回去。买房按揭要户口，才意识到这个大坑不尽早填上只会越来越麻烦。为了搞清楚怎样能把户口迁回去，我战战兢兢的打通了相关部门的服务电话号（还好还好，才打了几十次就有人接听了），服务态度和传说中的“为人民服务”一样，果然没让我失望，折腾了整整一天，总算搞明白了大概该怎么弄。还好有同学在，不用自己再去跑一趟，准备好相关的资料邮寄过去就只能祈祷了…</p>
<p>听说十二月份房价要涨，今天最后一天了，中介也“劝告”了我好几次赶紧出手，自己也心动了无数次。十一月份马上结束了，纠结的心该平静了些了，终究还是没有出手…</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就有计划在西安买房，一直觉得还早，主要是没钱，近期有人肯借钱就想看看市场。买房需要做很多准备工作，本想着慢慢先看着，一边从同学朋友那里打听消息，一边从网上看各个楼盘信息，怎奈越看越着急，就想一下子赶紧买了。看中的两个楼盘，价格其实都远远超过自己的预算和目前能承受的能力，不得不说我是一个容易被蛊惑的人，听着置业顾问的天花乱坠的描述，有好几次都差点都掉坑里了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161130202110.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>[转]Linux 查看系统内核版本和发行版本</title>
    <link href="http://ehlxr.me/2016/11/18/%E8%BD%AC-Linux-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    <id>http://ehlxr.me/2016/11/18/转-Linux-查看系统内核版本和发行版本/</id>
    <published>2016-11-18T14:56:43.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、查看-Linux-内核版本命令"><a href="#一、查看-Linux-内核版本命令" class="headerlink" title="一、查看 Linux 内核版本命令"></a>一、查看 Linux 内核版本命令</h1><p>以下两条命令适合所有 <code>Linux</code> 系统。</p>
<h2 id="1、cat-proc-version"><a href="#1、cat-proc-version" class="headerlink" title="1、cat /proc/version"></a>1、cat /proc/version</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/version</div><div class="line">Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015</span></div><div class="line"></div><div class="line">➜  ~ cat /proc/version   </div><div class="line">Linux version 4.4.0-36-generic (buildd@lcy01-01) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class="comment">#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016</span></div></pre></td></tr></table></figure>
<h2 id="2、uname-a"><a href="#2、uname-a" class="headerlink" title="2、uname -a"></a>2、uname -a</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ uname <span class="_">-a</span></div><div class="line">Linux centos 3.10.0-327.el7.x86_64 <span class="comment">#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</span></div><div class="line"></div><div class="line">➜  ~ uname <span class="_">-a</span></div><div class="line">Linux www 4.4.0-36-generic <span class="comment">#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、查看-Linux-系统版本的命令"><a href="#二、查看-Linux-系统版本的命令" class="headerlink" title="二、查看 Linux 系统版本的命令"></a>二、查看 Linux 系统版本的命令</h1><h2 id="1、lsb-release-a"><a href="#1、lsb-release-a" class="headerlink" title="1、lsb_release -a"></a>1、lsb_release -a</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ lsb_release <span class="_">-a</span></div><div class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</div><div class="line">Distributor ID: CentOS</div><div class="line">Description:    CentOS Linux release 7.2.1511 (Core)</div><div class="line">Release:        7.2.1511</div><div class="line">Codename:       Core</div><div class="line"></div><div class="line">➜  ~ lsb_release <span class="_">-a</span></div><div class="line">No LSB modules are available.</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 16.04.1 LTS</div><div class="line">Release:    16.04</div><div class="line">Codename:   xenial</div></pre></td></tr></table></figure>
<p>这个命令适用于所有的 <code>Linux</code> 发行版，包括 <code>Redhat</code>、<code>SuSE</code>、<code>Debian…</code> 等发行版。</p>
<p>有的系统中默认并没有安装 <code>lsb_release</code>，需要安装。下面介绍一下 <code>CentOS</code> 系统中安装方法。</p>
<p>首先查找 <code>lsb_release</code> 安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ yum provides lsb_release</div><div class="line">已加载插件：fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: mirrors.btte.net</div><div class="line"> * extras: mirrors.btte.net</div><div class="line"> * updates: mirrors.btte.net</div><div class="line">redhat-lsb-core-4.1-27.el7.centos.1.i686 : LSB Core module support</div><div class="line">源    ：base</div><div class="line">匹配来源：</div><div class="line">文件名    ：/usr/bin/lsb_release</div></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y redhat-lsb-core</div></pre></td></tr></table></figure>
<h2 id="2、cat-etc-redhat-release"><a href="#2、cat-etc-redhat-release" class="headerlink" title="2、cat /etc/redhat-release"></a>2、cat /etc/redhat-release</h2><p>这种方法只适合查看 <code>Redhat</code> 系的 <code>Linux</code>，如：<code>CentOS</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/redhat-release</div><div class="line">CentOS Linux release 7.2.1511 (Core)</div></pre></td></tr></table></figure>
<h2 id="3、cat-etc-issue"><a href="#3、cat-etc-issue" class="headerlink" title="3、cat /etc/issue"></a>3、cat /etc/issue</h2><p>此命令适用于所有的 <code>Linux</code> 发行版。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ cat /etc/issue</div><div class="line">Ubuntu 16.04.1 LTS \n \l</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、查看-Linux-内核版本命令&quot;&gt;&lt;a href=&quot;#一、查看-Linux-内核版本命令&quot; class=&quot;headerlink&quot; title=&quot;一、查看 Linux 内核版本命令&quot;&gt;&lt;/a&gt;一、查看 Linux 内核版本命令&lt;/h1&gt;&lt;p&gt;以下两条命令适合所有 &lt;code&gt;Linux&lt;/code&gt; 系统。&lt;/p&gt;
&lt;h2 id=&quot;1、cat-proc-version&quot;&gt;&lt;a href=&quot;#1、cat-proc-version&quot; class=&quot;headerlink&quot; title=&quot;1、cat /proc/version&quot;&gt;&lt;/a&gt;1、cat /proc/version&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat /proc/version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) &lt;span class=&quot;comment&quot;&gt;#1 SMP Thu Nov 19 22:10:57 UTC 2015&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ cat /proc/version   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux version 4.4.0-36-generic (buildd@lcy01-01) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) &lt;span class=&quot;comment&quot;&gt;#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2、uname-a&quot;&gt;&lt;a href=&quot;#2、uname-a&quot; class=&quot;headerlink&quot; title=&quot;2、uname -a&quot;&gt;&lt;/a&gt;2、uname -a&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ uname &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux centos 3.10.0-327.el7.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ uname &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux www 4.4.0-36-generic &lt;span class=&quot;comment&quot;&gt;#55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ehlxr.me/tags/Linux/"/>
    
      <category term="Linux版本" scheme="http://ehlxr.me/tags/Linux%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Test daocloud CI</title>
    <link href="http://ehlxr.me/2016/11/18/Test-daocloud-CI/"/>
    <id>http://ehlxr.me/2016/11/18/Test-daocloud-CI/</id>
    <published>2016-11-18T09:44:35.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<p>Test daocloud CI</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Test daocloud CI&lt;/p&gt;

    
    </summary>
    
      <category term="持续构建" scheme="http://ehlxr.me/categories/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="持续构建" scheme="http://ehlxr.me/tags/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>[转]Git 版本回滚</title>
    <link href="http://ehlxr.me/2016/11/07/%E8%BD%AC-Git-%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A/"/>
    <id>http://ehlxr.me/2016/11/07/转-Git-版本回滚/</id>
    <published>2016-11-07T16:53:38.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>总有一天你会遇到下面的问题：</p>
<ul>
<li>改完代码匆忙提交，上线发现有问题，怎么办？赶紧回滚。</li>
<li>改完代码测试也没有问题，但是上线发现你的修改影响了之前运行正常的代码报错，必须回滚。</li>
</ul>
</blockquote>
<p>这些开发中很常见的问题，所以 <code>git</code> 的取消提交，回退甚至返回上一版本都是特别重要的。大致分为下面 <code>2</code> 种情况：</p>
<h1 id="一、没有-push"><a href="#一、没有-push" class="headerlink" title="一、没有 push"></a>一、没有 push</h1><p>这种情况发生在你的本地代码仓库，可能你 <code>add</code>，<code>commit</code> 以后发现代码有点问题，准备取消提交，用到下面命令回退到某个版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [--soft | --mixed | --hard]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面常见三种类型</p>
<h2 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h2><p>会保留源码，只是将 <code>git commit</code> 和 <code>index</code> 信息回退到了某个版本。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> 默认是 <span class="comment">--mixed 模式 </span></div><div class="line">git <span class="keyword">reset</span> <span class="comment">--mixed  等价于  git reset</span></div></pre></td></tr></table></figure>
<h2 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h2><p>保留源码，只回退到 <code>commit</code> 信息到某个版本。不涉及 <code>index</code> 的回退，如果还需要提交，直接 <code>commit</code> 即可。</p>
<h2 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h2><p>源码也会回退到某个版本，<code>commit</code> 和 <code>index</code> 都回回退到某个版本。（<strong>注意，这种方式是改变本地代码仓库源码</strong>）</p>
<h1 id="二、已经-push"><a href="#二、已经-push" class="headerlink" title="二、已经 push"></a>二、已经 push</h1><h2 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1 方法一"></a>2.1 方法一</h2><p>使用 <code>git reset --hard &lt;commit...&gt;</code> 回退本地代码到某个版本。</p>
<p>使用 <code>git push --force</code> 将本次变更强行推送至服务器（因为你线上的代码没有变，线上 <code>commit</code>，<code>index</code> 都没有变，所以必须使用强制推送）。这样在服务器上的最后一次错误提交也彻底消失了。</p>
<p><strong>注意：</strong>这样操作比较比较危险，例如：在你的 <code>commit</code> 之后别人又提交了新的 <code>commit</code>，那在你强制推送之后，那位仁兄的 <code>commit</code> 也跟着一起消失了，所以不建议这样操作。</p>
<h2 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2 方法二"></a>2.2 方法二</h2><p>使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert &lt;commit-ish&gt;...</div></pre></td></tr></table></figure>
<p><code>git revert</code> 用于反转提交，用一个新提交来撤销某次提交，执行 <code>revert</code> 命令时要求工作树必须是干净的。</p>
<p><code>revert</code> 之后你再 <code>git push</code> 既可以把线上的代码更新。（这里不会像 <code>reset</code> 造成冲突的问题）</p>
<p><code>revert</code> 使用需要先找到你想回滚版本唯一的 <code>commit</code> 标识代码，可以用 <code>git log</code> 或者在 <code>adgit</code> 搭建的 <code>web</code> 环境历史提交记录里查看。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</div></pre></td></tr></table></figure>
<p>通常，前几位即可：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>c011eb3</div></pre></td></tr></table></figure>
<h1 id="三、revert-与-reset-比较"><a href="#三、revert-与-reset-比较" class="headerlink" title="三、revert 与 reset 比较"></a>三、revert 与 reset 比较</h1><p><code>git revert</code> 是用一次新的 <code>commit</code> 来回滚之前的 <code>commit</code>，<code>git reset</code> 是直接删除指定的 <code>commit</code>。</p>
<p>看似达到的效果是一样的，其实完全不同。</p>
<p>3.1 上面我们说的如果你已经 <code>push</code> 到线上代码库， <code>reset</code> 删除指定 <code>commit</code> 以后，你 <code>git push</code> 可能导致一大堆冲突。但是 <code>revert</code> 并不会。</p>
<p>3.2 如果在日后现有分支和历史分支需要合并的时候，<code>reset</code> 恢复部分的代码依然会出现在历史分支里。但是 <code>revert</code> 方向提交的 <code>commit</code> 并不会出现在历史分支里。</p>
<p>3.3 <code>reset</code> 是在正常的 <code>commit</code> 历史中，删除了指定的 <code>commit</code>，这时 <code>HEAD</code> 是向后移动了，而 <code>revert</code> 是在正常的 <code>commit</code> 历史中再 <code>commit</code> 一次，只不过是反向提交，他的 <code>HEAD</code> 是一直向前的。</p>
<hr>
<p><a href="http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html" target="_blank" rel="external">参考文章地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总有一天你会遇到下面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改完代码匆忙提交，上线发现有问题，怎么办？赶紧回滚。&lt;/li&gt;
&lt;li&gt;改完代码测试也没有问题，但是上线发现你的修改影响了之前运行正常的代码报错，必须回滚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些开发中很常见的问题，所以 &lt;code&gt;git&lt;/code&gt; 的取消提交，回退甚至返回上一版本都是特别重要的。大致分为下面 &lt;code&gt;2&lt;/code&gt; 种情况：&lt;/p&gt;
&lt;h1 id=&quot;一、没有-push&quot;&gt;&lt;a href=&quot;#一、没有-push&quot; class=&quot;headerlink&quot; title=&quot;一、没有 push&quot;&gt;&lt;/a&gt;一、没有 push&lt;/h1&gt;&lt;p&gt;这种情况发生在你的本地代码仓库，可能你 &lt;code&gt;add&lt;/code&gt;，&lt;code&gt;commit&lt;/code&gt; 以后发现代码有点问题，准备取消提交，用到下面命令回退到某个版本：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git reset [--soft | --mixed | --hard]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://ehlxr.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="http://ehlxr.me/2016/11/03/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ehlxr.me/2016/11/03/Docker-学习笔记/</id>
    <published>2016-11-03T15:46:19.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oapjp6spr.bkt.clouddn.com/20161103001.png" alt="Docker"></p>
<h1 id="一、CentOS-系统安装"><a href="#一、CentOS-系统安装" class="headerlink" title="一、CentOS 系统安装"></a>一、CentOS 系统安装</h1><p>参考《Docker — 从入门到实践》 之 <a href="https://github.com/yeasy/docker_practice/blob/master/install/centos.md" target="_blank" rel="external">“CentOS 操作系统安装 Docker”</a></p>
<h2 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h2><p>Docker 最低支持 CentOS 7。</p>
<p>Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p>
<p>参考升级<a href="http://ehlxr.me/2017/01/10/%E8%BD%AC-CentOS-%E5%8D%87%E7%BA%A7-kernel/">CentOS 升级 kernel</a></p>
<h2 id="1-2-使用脚本自动安装"><a href="#1-2-使用脚本自动安装" class="headerlink" title="1.2 使用脚本自动安装"></a>1.2 使用脚本自动安装</h2><p>Docker 官方为了简化安装流程，提供了一套安装脚本，CentOS 系统上可以使用这套脚本安装：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>SL https://get.docker.com/ | sh</div></pre></td></tr></table></figure></p>
<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 安装在系统中。</p>
<p>不过，由于伟大的墙的原因，在国内使用这个脚本可能会出现某些下载出现错误的情况。国内的一些云服务商提供了这个脚本的修改版本，使其使用国内的 Docker 软件源镜像安装，这样就避免了墙的干扰。</p>
<h3 id="1-2-1-阿里云的安装脚本"><a href="#1-2-1-阿里云的安装脚本" class="headerlink" title="1.2.1 阿里云的安装脚本"></a>1.2.1 阿里云的安装脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>SL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</div></pre></td></tr></table></figure>
<h3 id="1-2-2-DaoCloud-的安装脚本"><a href="#1-2-2-DaoCloud-的安装脚本" class="headerlink" title="1.2.2 DaoCloud 的安装脚本"></a>1.2.2 DaoCloud 的安装脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>SL https://get.daocloud.io/docker | sh</div></pre></td></tr></table></figure>
<h2 id="1-3-手动安装"><a href="#1-3-手动安装" class="headerlink" title="1.3 手动安装"></a>1.3 手动安装</h2><h3 id="1-3-1-添加内核参数"><a href="#1-3-1-添加内核参数" class="headerlink" title="1.3.1 添加内核参数"></a>1.3.1 添加内核参数</h3><p>默认配置下，在 CentOS 使用 Docker 可能会碰到下面的这些警告信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WARNING: bridge-nf-call-iptables is disabled</div><div class="line">WARNING: bridge-nf-call-ip6tables is disabled</div></pre></td></tr></table></figure>
<p>添加内核配置参数以启用这些功能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo tee <span class="_">-a</span> /etc/sysctl.conf &lt;&lt;-EOF</div><div class="line">net.bridge.bridge-nf-call-ip6tables = 1</div><div class="line">net.bridge.bridge-nf-call-iptables = 1</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>然后重新加载 <code>sysctl.conf</code> 即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo sysctl -p</div></pre></td></tr></table></figure>
<h3 id="1-3-2-添加-yum-源"><a href="#1-3-2-添加-yum-源" class="headerlink" title="1.3.2 添加 yum 源"></a>1.3.2 添加 yum 源</h3><p>虽然 CentOS 软件源 <code>Extras</code> 中有 Docker，名为 <code>docker</code>，但是不建议使用系统源中的这个版本，它的版本相对比较陈旧，而且并非 Docker 官方维护的版本。因此，我们需要使用 Docker 官方提供的 CentOS 软件源。</p>
<p>执行下面的命令添加 <code>yum</code> 软件源。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="string">'EOF'</span></div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
<h3 id="1-3-3-安装-Docker"><a href="#1-3-3-安装-Docker" class="headerlink" title="1.3.3 安装 Docker"></a>1.3.3 安装 Docker</h3><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-engine</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update</div><div class="line">$ sudo yum install docker-engine</div></pre></td></tr></table></figure>
<h3 id="1-3-4-启动-Docker-引擎"><a href="#1-3-4-启动-Docker-引擎" class="headerlink" title="1.3.4 启动 Docker 引擎"></a>1.3.4 启动 Docker 引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl <span class="built_in">enable</span> docker</div><div class="line">$ sudo systemctl start docker</div></pre></td></tr></table></figure>
<h3 id="1-3-5-建立-docker-用户组"><a href="#1-3-5-建立-docker-用户组" class="headerlink" title="1.3.5 建立 docker 用户组"></a>1.3.5 建立 docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="external">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p>
<p>建立 <code>docker</code> 组：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo groupadd docker</div></pre></td></tr></table></figure>
<p>将当前用户加入 <code>docker</code> 组：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo usermod <span class="_">-a</span>G docker <span class="variable">$USER</span></div></pre></td></tr></table></figure>
<h2 id="1-4-参考文档"><a href="#1-4-参考文档" class="headerlink" title="1.4 参考文档"></a>1.4 参考文档</h2><p>参见 <a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="external">Docker 官方 CentOS 安装文档</a>。</p>
<h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><h2 id="2-1-Docker-images"><a href="#2-1-Docker-images" class="headerlink" title="2.1 Docker images"></a>2.1 Docker images</h2><p>Docker image 是一个只读类型的模板。比如一个镜像可以是一个包含 apache 和你的 web 应用的 ubuntu 操作系统。我们经常使用镜像来创建容器。Docker 提供了一种快捷的方式来构建新镜像或者更新镜像，同时你也可以下载其他人已经创建好的镜像。Docker image 是 Docker 结构中的构建组件。</p>
<h2 id="2-2-Docker-Registries"><a href="#2-2-Docker-Registries" class="headerlink" title="2.2 Docker Registries"></a>2.2 Docker Registries</h2><p>Docker registries 用来保存镜像。它分为公开仓库和私有仓库，你可以从仓库中上传或者下载镜像。公开的 Docker 仓库称之为 <a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a>。它提供了你可以使用的非常多的镜像。你可以自由的创建镜像或者使用这里面其他人已经创建好的镜像。Docker registries 属于 Docker 中的分发组件。</p>
<h2 id="2-3-Docker-containers"><a href="#2-3-Docker-containers" class="headerlink" title="2.3 Docker containers"></a>2.3 Docker containers</h2><p>Docker containers 同目录有几分相似。Docker containers 保存了执行应用所需的所有资源。每一个 Docker containers 都是由 image 创建的。Docker containers 可以 run, start, stop, restart, rm。需要注意的是，Docker containers 之间是隔离的。Docker containers 属于 Docker 中的执行组件。</p>
<h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><h2 id="3-1-镜像操作"><a href="#3-1-镜像操作" class="headerlink" title="3.1 镜像操作"></a>3.1 镜像操作</h2><ul>
<li>拉取镜像：<code>docker pull nginx:latest</code></li>
<li>查看容器列表：<code>docker images</code></li>
<li>删除容器：<code>docker rmi &lt;image id&gt;</code></li>
<li>想要删除 untagged images（也就是那些 id 为 None 的容器）：<code>docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;{print $3}&quot;)</code></li>
<li>删除全部容器：<code>docker rmi $(docker images -q)</code></li>
</ul>
<h2 id="3-2-创建容器"><a href="#3-2-创建容器" class="headerlink" title="3.2 创建容器"></a>3.2 创建容器</h2><p>创建一个容器并运行，例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name blog --privileged=true -v /home/Hexo/public:/usr/share/nginx/<span class="selector-tag">html</span>:ro -d -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">80</span> docker.io/nginx</div></pre></td></tr></table></figure>
<ul>
<li><code>--name</code>：容器名称</li>
<li><code>--privileged=true</code>：设置权限</li>
<li><code>-v</code>：挂载本地磁盘目录，格式为本地磁盘绝对路径:容器路径<blockquote>
<p>保证删除容器后，数据不被删除</p>
</blockquote>
</li>
<li><code>:ro</code>：只读</li>
<li><code>-d</code>：后台模式</li>
<li><code>i</code>：交互式操作</li>
<li><code>t</code>：终端</li>
<li><code>-p</code>：设置宿主计算机和容器端口映射</li>
</ul>
<blockquote>
<p>在Dockerfile 中有一条指令是 EXPOSE 22，如果使用 <code>-P</code>，宿主机会随机选择一个 <code>没有被使用的端口</code> 和 docker <code>容器的 22 端口</code> 做 <code>端口映射</code>，如果 docker 主机或者容器重启后，宿主机又会随机选择一个没有被使用的端口和 docker 容器的 22 端口做端口映射，这样端口会发生 <code>变化</code></p>
<p>如果使用 <code>-p</code>，比如 <code>2222:22</code>，这样不管是 docker 主机或者容器重启后，2222:22 端口都是这样来映射，<code>不会发生改变</code></p>
</blockquote>
<h2 id="3-3-容器操作"><a href="#3-3-容器操作" class="headerlink" title="3.3 容器操作"></a>3.3 容器操作</h2><ul>
<li>启动：<code>docker start blog</code></li>
<li>停止：<code>docker stop blog</code>；停止所有容器：<code>docker stop $(docker ps -a -q)</code></li>
<li>删除：<code>docker rm blog</code>；删除所有容器：<code>docker rm $(docker ps -a -q)</code></li>
<li>查看：<code>docker ps -a</code>（查看所有容器，包括已启动的和未启动的）</li>
</ul>
<h2 id="3-3-进入容器"><a href="#3-3-进入容器" class="headerlink" title="3.3 进入容器"></a>3.3 进入容器</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker <span class="keyword">exec</span> -it blog /bin/bash</div></pre></td></tr></table></figure>
<h1 id="四、Docker-私有仓库"><a href="#四、Docker-私有仓库" class="headerlink" title="四、Docker 私有仓库"></a>四、Docker 私有仓库</h1><p>Docker 提供了一个中央仓库，同时也允许我们使用 registry 搭建本地私有仓库。</p>
<h2 id="4-1-搭建-Docker-私有仓库"><a href="#4-1-搭建-Docker-私有仓库" class="headerlink" title="4.1 搭建 Docker 私有仓库"></a>4.1 搭建 Docker 私有仓库</h2><p>首先拉取 registry 镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull registry</div></pre></td></tr></table></figure>
<p>创建 register 容器并运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name registry <span class="_">-d</span> -p 5000:5000 --privileged=<span class="literal">true</span> -v /opt/registry:/var/lib/registry/ registry</div></pre></td></tr></table></figure>
<p>挂载容器中存放镜像的目录到本地 <code>/opt/registry</code>，需要注意的一点是，容器中存放镜像的目录 registry 官方镜像示例中使用的是 <code>/tmp/registry-dev</code> ，但实验证明在版本 <code>2.5.0</code> 中，目录是 <code>/var/lib/registry/</code>。</p>
<p>CentOS 系统挂载目录需要加上 <code>--privileged=true</code> 解决挂载的目录没有权限的问题。</p>
<p>打开浏览器输入 register 容器宿主计算机地址加端口（如：<a href="http://192.168.237.128:5000/v2/" target="_blank" rel="external">http://192.168.237.128:5000/v2/</a> ），如果出现 <code>{}</code>，即表明 register 容器运行成功。</p>
<h2 id="4-2-测试使用私有仓库"><a href="#4-2-测试使用私有仓库" class="headerlink" title="4.2 测试使用私有仓库"></a>4.2 测试使用私有仓库</h2><p>首先给需要 push 到仓库的 images 打 TAG，前面需要带上私有仓库的地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker tag docker.io/registry:latest 192.168.237.128:5000/registry:2.5.0</div></pre></td></tr></table></figure>
<p>push 到私有仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker push 192.168.237.128:5000/registry:2.5.0</div></pre></td></tr></table></figure>
<p>通过以下命令删除镜像 <code>192.168.237.128:5000/registry:2.5.0</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rmi 192.168.237.128:5000/registry:2.5.0</div></pre></td></tr></table></figure>
<p>然后通过以下命令即可拉取私有仓库的镜像：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull 192.168.237.128:5000/hexo:latest</div></pre></td></tr></table></figure>
<p>如果 docker push 的时候出现以下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker push 192.168.237.128:5000/registry:2.5.0</div><div class="line">The push refers to a repository [192.168.237.128:5000/registry]</div><div class="line">unable to ping registry endpoint https://192.168.237.128:5000/v0/</div><div class="line">v2 ping attempt failed with error: Get https://192.168.237.128:5000/v2/: http: server gave HTTP response to HTTPS client</div><div class="line"> v1 ping attempt failed with error: Get https://192.168.237.128:5000/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p>修改文件 <code>/etc/sysconfig/docker</code> 添加以下代码，然后重启 docker 服务即可重新 push。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ADD_REGISTRY=<span class="string">'--add-registry 192.168.237.128:5000'</span></div><div class="line"></div><div class="line">INSECURE_REGISTRY=<span class="string">'--insecure-registry 192.168.237.128:5000'</span></div></pre></td></tr></table></figure>
<h1 id="五、Dockerfile"><a href="#五、Dockerfile" class="headerlink" title="五、Dockerfile"></a>五、Dockerfile</h1><h2 id="5-1-什么是Dockerfile？"><a href="#5-1-什么是Dockerfile？" class="headerlink" title="5.1 什么是Dockerfile？"></a>5.1 什么是Dockerfile？</h2><blockquote>
<p>Dockerfile 是自动构建 docker 镜像的配置文件，Dockerfile 中的命令非常类似 linux shell 下的命令<br>Dockerfile，可以让用户自定义构建 docker 镜像，支持以 # 开头的注释行</p>
</blockquote>
<p>一般，Dockerfile分为4部分</p>
<ul>
<li>基础镜像（父镜像）信息</li>
<li>维护者信息</li>
<li>镜像操作命令</li>
<li>容器启动命令</li>
</ul>
<h2 id="5-2-Dockerfile-介绍"><a href="#5-2-Dockerfile-介绍" class="headerlink" title="5.2 Dockerfile 介绍"></a>5.2 Dockerfile 介绍</h2><p><code>FROM       centos:centos7.1.1503</code></p>
<blockquote>
<p>基于 <strong>父镜像</strong> 构建其他 docker 镜像，<em>父镜像</em>：可以通过 docker pull 命令获得，也可以自己制作</p>
</blockquote>
<p><code>MAINTAINER Carson,C.J.Zeong &lt;zcy@nicescale.com&gt;</code></p>
<blockquote>
<p>Dockerfile 维护者</p>
</blockquote>
<p><code>ENV TZ &quot;Asia/Shanghai&quot;</code></p>
<blockquote>
<p>ENV（environment）设置环境变量，一个 Dockerfile 中可以写多个。以上例子是：设置 docker 容器的时区为 Shanghai</p>
</blockquote>
<p><strong>Dockerfile 中有 2 条指令可以拷贝文件</strong></p>
<p><code>ADD aliyun-mirror.repo /etc/yum.repos.d/CentOS-Base.repo</code></p>
<blockquote>
<p>拷贝本地文件到 docker 容器里，还可以拷贝 URL 链接地址下的文件，ADD 还具有解压软件包的功能（支持 gzip, bzip2 or xz）</p>
</blockquote>
<p><code>COPY test /mydir</code></p>
<blockquote>
<p>拷贝本地文件到 docker 容器</p>
</blockquote>
<p><code>RUN yum install -y curl wget....</code></p>
<blockquote>
<p>RUN 命令，非常类似 Linux 下的 shell 命令 <code>(the command is run in a shell - /bin/sh -c - shell form)</code><br>在 Dockerfile 中每执行一条指令（ENV、ADD、RUN等命令），都会生成一个 docker image layer</p>
</blockquote>
<p><code>ADD supervisord.conf /etc/supervisord.conf</code></p>
<blockquote>
<p>添加 supervisor 的主配置文件，到 docker 容器里</p>
</blockquote>
<p><code>EXPOSE 22</code></p>
<blockquote>
<p>端口映射 <code>EXPOSE &lt;host_port&gt;:&lt;container_port&gt;</code><br>推荐使用 <code>docker run -p &lt;host_port&gt;:&lt;container_port&gt;</code> 来固化端口</p>
</blockquote>
<p><code>ENTRYPOINT [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisord.conf&quot;]</code></p>
<blockquote>
<p>一个 Dockerfile 中只有最后一条 <code>ENTRYPOINT</code> 生效，并且每次启动 docker 容器，都会执行 <code>ENTRYPOINT</code></p>
</blockquote>
<p><code>ONBUILD ADD . /app</code></p>
<blockquote>
<p><code>ONBUILD</code> 在生成当前docker镜像的时候不生效，在子镜像生效；<code>ONBUILD</code>在产品发布时起着非常重要的作用！举例<br>A镜像中有<code>ONBUILD</code>指令，在构建A镜像时<code>ONBUILD</code>指令不执行；B镜像<code>FROM A</code>,在构建B镜像时<code>ONBUILD</code>指令开始执行；</p>
</blockquote>
<p><code>VOLUME [&quot;/var/lib/mysql&quot;]</code></p>
<blockquote>
<p>指定 docker 容器和宿主机做映射的文件目录</p>
</blockquote>
<h2 id="5-3-生成-docker-镜像"><a href="#5-3-生成-docker-镜像" class="headerlink" title="5.3 生成 docker 镜像"></a>5.3 生成 docker 镜像</h2><p>以上文件就是用来生成第一个 docker 镜像的 Dockerfile，通过 <code>docker build</code> 指令来生成 docker 镜像</p>
<p><code>docker build -t csphere/centos:7.1 .</code></p>
<blockquote>
<p>如果 Dockerfile 在当前目录下，输入点 <code>.</code> 就可以进行加载当前目录下的 <code>Dockerfile</code><br>如果不在当前目录下需要运行 <code>docker build -t csphere/centos:7.1 &lt;Dockerfile_dir&gt;</code> 加载相对路径下的 <code>Dockerfile</code></p>
</blockquote>
<p>docker 镜像的命名规则 <code>registry_url/namespace/image_name:tag</code> 默认 <code>tag</code> 是 <code>latest</code></p>
<blockquote>
<p>在构建 Docker 镜像时，如果有自己内部的 yum 源，替换成自己内部的 yum 地址，可以加快构建速度。<br>如果第一次构建失败，会有部分镜像 layer 生成，第二次构建会基于第一次构建所生成的 layer（use cache），继续构建</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Step 10 : EXPOSE 22</div><div class="line"> ---&gt; Running <span class="keyword">in</span> 0ed1c5479ebc</div><div class="line"> ---&gt; c57a5bac41c8</div><div class="line">Removing intermediate container 0ed1c5479ebc</div><div class="line">Step 11 : ENTRYPOINT /usr/bin/supervisord -n -c /etc/supervisord.conf</div><div class="line"> ---&gt; Running <span class="keyword">in</span> e16c7ac2fd45</div><div class="line"> ---&gt; 185ef7b101a8</div><div class="line">Removing intermediate container e16c7ac2fd45</div><div class="line">Successfully built 185ef7b101a8</div></pre></td></tr></table></figure>
<p>可以看到每执行一条 <code>Dockerfile</code> 的指令都会生成一个镜像的 layer <code>c57a5bac41c8</code> <code>185ef7b101a8</code> 最后 <code>185ef7b101a8</code> 这个是 docker 镜像的ID，<code>185ef7b101a8</code> 是由 <code>c57a5bac41c8</code> <code>185ef7b101a8</code>…layers 叠加而成，体现了 docker 镜像是分层的</p>
<hr>
<div style="color: #f00;">未完待续…</div>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oapjp6spr.bkt.clouddn.com/20161103001.png&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、CentOS-系统安装&quot;&gt;&lt;a href=&quot;#一、CentOS-系统安装&quot; class=&quot;headerlink&quot; title=&quot;一、CentOS 系统安装&quot;&gt;&lt;/a&gt;一、CentOS 系统安装&lt;/h1&gt;&lt;p&gt;参考《Docker — 从入门到实践》 之 &lt;a href=&quot;https://github.com/yeasy/docker_practice/blob/master/install/centos.md&quot;&gt;“CentOS 操作系统安装 Docker”&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-系统要求&quot;&gt;&lt;a href=&quot;#1-1-系统要求&quot; class=&quot;headerlink&quot; title=&quot;1.1 系统要求&quot;&gt;&lt;/a&gt;1.1 系统要求&lt;/h2&gt;&lt;p&gt;Docker 最低支持 CentOS 7。&lt;/p&gt;
&lt;p&gt;Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 &lt;code&gt;overlay2&lt;/code&gt; 存储层驱动）无法使用，并且部分功能可能不太稳定。&lt;/p&gt;
&lt;p&gt;参考升级&lt;a href=&quot;http://ehlxr.me/2017/01/10/%E8%BD%AC-CentOS-%E5%8D%87%E7%BA%A7-kernel/&quot;&gt;CentOS 升级 kernel&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-2-使用脚本自动安装&quot;&gt;&lt;a href=&quot;#1-2-使用脚本自动安装&quot; class=&quot;headerlink&quot; title=&quot;1.2 使用脚本自动安装&quot;&gt;&lt;/a&gt;1.2 使用脚本自动安装&lt;/h2&gt;&lt;p&gt;Docker 官方为了简化安装流程，提供了一套安装脚本，CentOS 系统上可以使用这套脚本安装：&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://ehlxr.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://ehlxr.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>测试使用 daocloud 持续构建 Hexo</title>
    <link href="http://ehlxr.me/2016/11/02/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8-daocloud-%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-Hexo/"/>
    <id>http://ehlxr.me/2016/11/02/测试使用-daocloud-持续构建-Hexo/</id>
    <published>2016-11-02T19:03:06.000Z</published>
    <updated>2017-04-12T05:58:32.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试使用-daocloud-持续构建-Hexo"><a href="#测试使用-daocloud-持续构建-Hexo" class="headerlink" title="测试使用 daocloud 持续构建 Hexo"></a>测试使用 daocloud 持续构建 Hexo</h1><div class="note danger"><p>Coding Hexo DaoCloud </p>
</div>
<div class="note primary"><p>看到这边博文，表示持续构建成功！！！ </p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试使用-daocloud-持续构建-Hexo&quot;&gt;&lt;a href=&quot;#测试使用-daocloud-持续构建-Hexo&quot; class=&quot;headerlink&quot; title=&quot;测试使用 daocloud 持续构建 Hexo&quot;&gt;&lt;/a&gt;测试使用 daocloud 持续构
    
    </summary>
    
      <category term="持续构建" scheme="http://ehlxr.me/categories/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="持续构建" scheme="http://ehlxr.me/tags/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Daocloud" scheme="http://ehlxr.me/tags/Daocloud/"/>
    
  </entry>
  
  <entry>
    <title>测试 Travis CI 结合 Hexo 使用</title>
    <link href="http://ehlxr.me/2016/11/02/%E6%B5%8B%E8%AF%95-Travis-CI-%E7%BB%93%E5%90%88-Hexo-%E4%BD%BF%E7%94%A8/"/>
    <id>http://ehlxr.me/2016/11/02/测试-Travis-CI-结合-Hexo-使用/</id>
    <published>2016-11-02T17:32:35.000Z</published>
    <updated>2017-04-12T05:58:32.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试-Travis-CI-结合-Hexo-使用"><a href="#测试-Travis-CI-结合-Hexo-使用" class="headerlink" title="测试 Travis CI 结合 Hexo 使用"></a>测试 Travis CI 结合 Hexo 使用</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试-Travis-CI-结合-Hexo-使用&quot;&gt;&lt;a href=&quot;#测试-Travis-CI-结合-Hexo-使用&quot; class=&quot;headerlink&quot; title=&quot;测试 Travis CI 结合 Hexo 使用&quot;&gt;&lt;/a&gt;测试 Travis CI 结合 H
    
    </summary>
    
      <category term="持续构建" scheme="http://ehlxr.me/categories/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="持续构建" scheme="http://ehlxr.me/tags/%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Travis CI" scheme="http://ehlxr.me/tags/Travis-CI/"/>
    
  </entry>
  
</feed>
